"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getXAxisRightOverflow = void 0;
var scales_1 = require("../../../../scales");
var constants_1 = require("../../../../scales/constants");
var create_selector_1 = require("../../../../state/create_selector");
var get_chart_theme_1 = require("../../../../state/selectors/get_chart_theme");
var canvas_text_bbox_calculator_1 = require("../../../../utils/bbox/canvas_text_bbox_calculator");
var dimensions_1 = require("../../../../utils/dimensions");
var get_heatmap_spec_1 = require("./get_heatmap_spec");
var get_heatmap_table_1 = require("./get_heatmap_table");
exports.getXAxisRightOverflow = (0, create_selector_1.createCustomCachedSelector)([get_heatmap_spec_1.getHeatmapSpecSelector, get_chart_theme_1.getChartThemeSelector, get_heatmap_table_1.getHeatmapTableSelector], function (_a, _b, _c) {
    var xScale = _a.xScale, timeZone = _a.timeZone, xAxisLabelFormatter = _a.xAxisLabelFormatter;
    var style = _b.heatmap.xAxisLabel;
    var xNumericExtent = _c.xNumericExtent;
    return xScale.type !== constants_1.ScaleType.Time
        ? 0
        : typeof style.width === 'number'
            ? style.width / 2
            : (0, canvas_text_bbox_calculator_1.withTextMeasure)(function (measure) {
                return new scales_1.ScaleContinuous({ type: constants_1.ScaleType.Time, domain: xNumericExtent, range: [0, 1] }, { timeZone: xScale.type === constants_1.ScaleType.Time ? timeZone : undefined })
                    .ticks()
                    .reduce(function (max, n) {
                    return Math.max(max, measure(xAxisLabelFormatter(n), __assign({}, style), style.fontSize).width + (0, dimensions_1.horizontalPad)(style.padding));
                }, 0);
            }) / 2;
});
//# sourceMappingURL=get_x_axis_right_overflow.js.map