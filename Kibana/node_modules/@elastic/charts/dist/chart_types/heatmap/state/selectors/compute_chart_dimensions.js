"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeChartElementSizesSelector = void 0;
var create_selector_1 = require("../../../../state/create_selector");
var get_chart_theme_1 = require("../../../../state/selectors/get_chart_theme");
var get_legend_size_1 = require("../../../../state/selectors/get_legend_size");
var canvas_text_bbox_calculator_1 = require("../../../../utils/bbox/canvas_text_bbox_calculator");
var dimensions_1 = require("../../../../utils/dimensions");
var legend_1 = require("../../../../utils/legend");
var get_heatmap_spec_1 = require("./get_heatmap_spec");
var get_heatmap_table_1 = require("./get_heatmap_table");
var get_x_axis_right_overflow_1 = require("./get_x_axis_right_overflow");
var getParentDimension = function (state) { return state.parentDimensions; };
exports.computeChartElementSizesSelector = (0, create_selector_1.createCustomCachedSelector)([
    getParentDimension,
    get_legend_size_1.getLegendSizeSelector,
    get_heatmap_table_1.getHeatmapTableSelector,
    get_chart_theme_1.getChartThemeSelector,
    get_x_axis_right_overflow_1.getXAxisRightOverflow,
    get_heatmap_spec_1.getHeatmapSpecSelector,
], function (container, legendSize, _a, _b, rightOverflow, _c) {
    var yValues = _a.yValues;
    var heatmap = _b.heatmap, axisTitleStyle = _b.axes.axisTitle;
    var xAxisTitle = _c.xAxisTitle, yAxisTitle = _c.yAxisTitle, yAxisLabelFormatter = _c.yAxisLabelFormatter;
    return (0, canvas_text_bbox_calculator_1.withTextMeasure)(function (textMeasure) {
        var _a;
        var isLegendHorizontal = (0, legend_1.isHorizontalLegend)(legendSize.position);
        var legendWidth = !isLegendHorizontal ? legendSize.width + legendSize.margin * 2 : 0;
        var legendHeight = isLegendHorizontal
            ? (_a = heatmap.maxLegendHeight) !== null && _a !== void 0 ? _a : legendSize.height + legendSize.margin * 2
            : 0;
        var yAxisTitleHorizontalSize = getTextSizeDimension(yAxisTitle, axisTitleStyle, textMeasure, 'height');
        var yAxisWidth = getYAxisHorizontalUsedSpace(yValues, heatmap.yAxisLabel, yAxisLabelFormatter, textMeasure);
        var xAxisTitleVerticalSize = getTextSizeDimension(xAxisTitle, axisTitleStyle, textMeasure, 'height');
        var xAxisHeight = heatmap.xAxisLabel.visible
            ? heatmap.xAxisLabel.fontSize + (0, dimensions_1.verticalPad)(heatmap.xAxisLabel.padding)
            : 0;
        var availableHeightForGrid = container.height - xAxisTitleVerticalSize - xAxisHeight - legendHeight;
        var rowHeight = getGridCellHeight(yValues.length, heatmap.grid, availableHeightForGrid);
        var fullHeatmapHeight = rowHeight * yValues.length;
        var visibleNumberOfRows = rowHeight > 0 && fullHeatmapHeight > availableHeightForGrid
            ? Math.floor(availableHeightForGrid / rowHeight)
            : yValues.length;
        var grid = {
            width: container.width - yAxisWidth - yAxisTitleHorizontalSize - rightOverflow - legendWidth,
            height: visibleNumberOfRows * rowHeight,
            left: container.left + yAxisTitleHorizontalSize + yAxisWidth,
            top: container.top,
        };
        var yAxis = {
            width: yAxisWidth,
            height: grid.height,
            top: grid.top,
            left: grid.left - yAxisWidth,
        };
        var xAxis = {
            width: grid.width,
            height: xAxisHeight,
            top: grid.top + grid.height,
            left: grid.left,
        };
        return { grid: grid, yAxis: yAxis, xAxis: xAxis, visibleNumberOfRows: visibleNumberOfRows, fullHeatmapHeight: fullHeatmapHeight, rowHeight: rowHeight };
    });
});
function getYAxisHorizontalUsedSpace(yValues, style, formatter, textMeasure) {
    if (!style.visible) {
        return 0;
    }
    var longestLabelWidth = yValues.reduce(function (acc, value) {
        var width = textMeasure(formatter(value), style, style.fontSize).width;
        return Math.max(width, acc);
    }, 0);
    var labelsWidth = style.width === 'auto'
        ? longestLabelWidth
        : typeof style.width === 'number'
            ? style.width
            : Math.max(longestLabelWidth, style.width.max);
    return labelsWidth + (0, dimensions_1.horizontalPad)(style.padding);
}
function getTextSizeDimension(text, style, textMeasure, param) {
    var _a;
    if (!style.visible || text === '') {
        return 0;
    }
    var textPadding = (0, dimensions_1.innerPad)(style.padding) + (0, dimensions_1.outerPad)(style.padding);
    if (param === 'height') {
        return style.fontSize + textPadding;
    }
    var textBox = textMeasure(text, {
        fontFamily: style.fontFamily,
        fontVariant: 'normal',
        fontWeight: 'bold',
        fontStyle: (_a = style.fontStyle) !== null && _a !== void 0 ? _a : 'normal',
    }, style.fontSize);
    return textBox.width + textPadding;
}
function getGridCellHeight(rows, grid, height) {
    if (rows === 0) {
        return height;
    }
    var stretchedHeight = height / rows;
    if (stretchedHeight < grid.cellHeight.min) {
        return grid.cellHeight.min;
    }
    if (grid.cellHeight.max !== 'fill' && stretchedHeight > grid.cellHeight.max) {
        return grid.cellHeight.max;
    }
    return stretchedHeight;
}
//# sourceMappingURL=compute_chart_dimensions.js.map