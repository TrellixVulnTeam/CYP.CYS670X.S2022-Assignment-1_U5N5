"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldIcon = FieldIcon;
exports.typeToEuiIconMap = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _eui = require("@elastic/eui");

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
// defaultIcon => a unknown datatype
const defaultIcon = {
  iconType: 'questionInCircle',
  color: 'gray'
};
const typeToEuiIconMap = {
  boolean: {
    iconType: 'tokenBoolean'
  },
  // icon for an index pattern mapping conflict in discover
  conflict: {
    iconType: 'alert',
    color: 'euiColorVis9',
    shape: 'square'
  },
  date: {
    iconType: 'tokenDate'
  },
  date_range: {
    iconType: 'tokenDate'
  },
  geo_point: {
    iconType: 'tokenGeo'
  },
  geo_shape: {
    iconType: 'tokenGeo'
  },
  ip: {
    iconType: 'tokenIP'
  },
  ip_range: {
    iconType: 'tokenIP'
  },
  // is a plugin's data type https://www.elastic.co/guide/en/elasticsearch/plugins/current/mapper-murmur3-usage.html
  murmur3: {
    iconType: 'tokenFile'
  },
  number: {
    iconType: 'tokenNumber'
  },
  number_range: {
    iconType: 'tokenNumber'
  },
  histogram: {
    iconType: 'tokenHistogram'
  },
  _source: {
    iconType: 'editorCodeBlock',
    color: 'gray'
  },
  string: {
    iconType: 'tokenString'
  },
  text: {
    iconType: 'tokenString'
  },
  keyword: {
    iconType: 'tokenKeyword'
  },
  nested: {
    iconType: 'tokenNested'
  },
  version: {
    iconType: 'tokenTag'
  }
};
/**
 * Field token icon used across the app
 */

exports.typeToEuiIconMap = typeToEuiIconMap;

function FieldIcon({
  type,
  label,
  size = 's',
  scripted,
  className,
  ...rest
}) {
  const token = typeToEuiIconMap[type] || defaultIcon;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiToken, (0, _extends2.default)({}, token, {
    className: (0, _classnames.default)('kbnFieldIcon', className),
    "aria-label": label || type,
    title: label || type,
    size: size,
    fill: scripted ? 'dark' : undefined
  }, rest));
}