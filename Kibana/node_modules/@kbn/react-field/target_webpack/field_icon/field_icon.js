import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["type", "label", "size", "scripted", "className"];

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import React from 'react';
import classNames from 'classnames';
import { EuiToken } from '@elastic/eui';
import { jsx as ___EmotionJSX } from "@emotion/react";
// defaultIcon => a unknown datatype
var defaultIcon = {
  iconType: 'questionInCircle',
  color: 'gray'
};
export var typeToEuiIconMap = {
  "boolean": {
    iconType: 'tokenBoolean'
  },
  // icon for an index pattern mapping conflict in discover
  conflict: {
    iconType: 'alert',
    color: 'euiColorVis9',
    shape: 'square'
  },
  date: {
    iconType: 'tokenDate'
  },
  date_range: {
    iconType: 'tokenDate'
  },
  geo_point: {
    iconType: 'tokenGeo'
  },
  geo_shape: {
    iconType: 'tokenGeo'
  },
  ip: {
    iconType: 'tokenIP'
  },
  ip_range: {
    iconType: 'tokenIP'
  },
  // is a plugin's data type https://www.elastic.co/guide/en/elasticsearch/plugins/current/mapper-murmur3-usage.html
  murmur3: {
    iconType: 'tokenFile'
  },
  number: {
    iconType: 'tokenNumber'
  },
  number_range: {
    iconType: 'tokenNumber'
  },
  histogram: {
    iconType: 'tokenHistogram'
  },
  _source: {
    iconType: 'editorCodeBlock',
    color: 'gray'
  },
  string: {
    iconType: 'tokenString'
  },
  text: {
    iconType: 'tokenString'
  },
  keyword: {
    iconType: 'tokenKeyword'
  },
  nested: {
    iconType: 'tokenNested'
  },
  version: {
    iconType: 'tokenTag'
  }
};
/**
 * Field token icon used across the app
 */

export function FieldIcon(_ref) {
  var type = _ref.type,
      label = _ref.label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 's' : _ref$size,
      scripted = _ref.scripted,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, _excluded);

  var token = typeToEuiIconMap[type] || defaultIcon;
  return ___EmotionJSX(EuiToken, _extends({}, token, {
    className: classNames('kbnFieldIcon', className),
    "aria-label": label || type,
    title: label || type,
    size: size,
    fill: scripted ? 'dark' : undefined
  }, rest));
}