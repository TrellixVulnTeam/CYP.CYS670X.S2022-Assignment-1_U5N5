import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["size", "isActive", "fieldIcon", "fieldName", "fieldInfoIcon", "fieldAction", "className", "isDraggable", "onClick", "dataTestSubj", "buttonProps"];

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import './field_button.scss';
import classNames from 'classnames';
import React from 'react';
import { jsx as ___EmotionJSX } from "@emotion/react";
var sizeToClassNameMap = {
  s: 'kbnFieldButton--small',
  m: null
};
export var SIZES = Object.keys(sizeToClassNameMap);
export function FieldButton(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'm' : _ref$size,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? false : _ref$isActive,
      fieldIcon = _ref.fieldIcon,
      fieldName = _ref.fieldName,
      fieldInfoIcon = _ref.fieldInfoIcon,
      fieldAction = _ref.fieldAction,
      className = _ref.className,
      _ref$isDraggable = _ref.isDraggable,
      isDraggable = _ref$isDraggable === void 0 ? false : _ref$isDraggable,
      _onClick = _ref.onClick,
      dataTestSubj = _ref.dataTestSubj,
      buttonProps = _ref.buttonProps,
      rest = _objectWithoutProperties(_ref, _excluded);

  var classes = classNames('kbnFieldButton', size ? sizeToClassNameMap[size] : null, {
    'kbnFieldButton-isActive': isActive
  }, {
    'kbnFieldButton--isDraggable': isDraggable
  }, className);
  var contentClasses = classNames('kbn-resetFocusState', 'kbnFieldButton__button');

  var innerContent = ___EmotionJSX(React.Fragment, null, fieldIcon && ___EmotionJSX("span", {
    className: "kbnFieldButton__fieldIcon"
  }, fieldIcon), fieldName && ___EmotionJSX("span", {
    className: "kbnFieldButton__name"
  }, fieldName), fieldInfoIcon && ___EmotionJSX("div", {
    className: "kbnFieldButton__infoIcon"
  }, fieldInfoIcon));

  return ___EmotionJSX("div", _extends({
    className: classes
  }, rest), _onClick ? ___EmotionJSX("button", _extends({
    onClick: function onClick(e) {
      if (e.type === 'click') {
        e.currentTarget.focus();
      }

      _onClick();
    },
    "data-test-subj": dataTestSubj,
    className: contentClasses
  }, buttonProps), innerContent) : ___EmotionJSX("div", {
    className: contentClasses,
    "data-test-subj": dataTestSubj
  }, innerContent), fieldAction && ___EmotionJSX("div", {
    className: "kbnFieldButton__fieldAction"
  }, fieldAction));
}