import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import * as PropTypes from 'prop-types';
import * as React from 'react'; // eslint-disable-next-line @kbn/eslint/module_migration

import { IntlProvider } from 'react-intl';
import { i18n } from '@kbn/i18n';
import { PseudoLocaleWrapper } from './pseudo_locale_wrapper';
/**
 * The library uses the provider pattern to scope an i18n context to a tree
 * of components. This component is used to setup the i18n context for a tree.
 * IntlProvider should wrap react app's root component (inside each react render method).
 */

import { jsx as ___EmotionJSX } from "@emotion/react";
export var I18nProvider = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(I18nProvider, _React$PureComponent);

  var _super = _createSuper(I18nProvider);

  function I18nProvider() {
    _classCallCheck(this, I18nProvider);

    return _super.apply(this, arguments);
  }

  _createClass(I18nProvider, [{
    key: "render",
    value: function render() {
      return ___EmotionJSX(IntlProvider, {
        locale: i18n.getLocale(),
        messages: i18n.getTranslation().messages,
        defaultLocale: i18n.getDefaultLocale(),
        formats: i18n.getFormats(),
        textComponent: React.Fragment
      }, ___EmotionJSX(PseudoLocaleWrapper, null, this.props.children));
    }
  }]);

  return I18nProvider;
}(React.PureComponent);

_defineProperty(I18nProvider, "propTypes", {
  children: PropTypes.element.isRequired
});