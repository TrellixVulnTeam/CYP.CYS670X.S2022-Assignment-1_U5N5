/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements. 
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.apm_bundle_jsonpfunction=window.apm_bundle_jsonpfunction||[]).push([[3],{118:function(e,t,n){var a,r,s,i;
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */i=function(e){var t=Object.prototype.toString,n=Array.isArray||function(e){return"[object Array]"===t.call(e)};function a(e){return"function"==typeof e}function r(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function s(e,t){return null!=e&&"object"==typeof e&&t in e}var i=RegExp.prototype.test,o=/\S/;function l(e){return!function(e,t){return i.call(e,t)}(o,e)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},m=/\s*/,p=/\s+/,u=/\s*=/,d=/\s*\}/,f=/#|\^|\/|>|\{|&|=|!/;function v(e){this.string=e,this.tail=e,this.pos=0}function h(e,t){this.view=e,this.cache={".":this.view},this.parent=t}function g(){this.cache={}}v.prototype.eos=function(){return""===this.tail},v.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},v.prototype.scanUntil=function(e){var t,n=this.tail.search(e);switch(n){case-1:t=this.tail,this.tail="";break;case 0:t="";break;default:t=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=t.length,t},h.prototype.push=function(e){return new h(e,this)},h.prototype.lookup=function(e){var t,n=this.cache;if(n.hasOwnProperty(e))t=n[e];else{for(var r,i,o=this,l=!1;o;){if(e.indexOf(".")>0)for(t=o.view,r=e.split("."),i=0;null!=t&&i<r.length;)i===r.length-1&&(l=s(t,r[i])),t=t[r[i++]];else t=o.view[e],l=s(o.view,e);if(l)break;o=o.parent}n[e]=t}return a(t)&&(t=t.call(this.view)),t},g.prototype.clearCache=function(){this.cache={}},g.prototype.parse=function(t,a){var s=this.cache,i=s[t];return null==i&&(i=s[t]=function(t,a){if(!t)return[];var s,i,o,c=[],h=[],g=[],S=!1,C=!1;function k(){if(S&&!C)for(;g.length;)delete h[g.pop()];else g=[];S=!1,C=!1}function A(e){if("string"==typeof e&&(e=e.split(p,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);s=new RegExp(r(e[0])+"\\s*"),i=new RegExp("\\s*"+r(e[1])),o=new RegExp("\\s*"+r("}"+e[1]))}A(a||e.tags);for(var M,E,U,_,x,y,w=new v(t);!w.eos();){if(M=w.pos,U=w.scanUntil(s))for(var T=0,R=U.length;T<R;++T)l(_=U.charAt(T))?g.push(h.length):C=!0,h.push(["text",_,M,M+1]),M+=1,"\n"===_&&k();if(!w.scan(s))break;if(S=!0,E=w.scan(f)||"name",w.scan(m),"="===E?(U=w.scanUntil(u),w.scan(u),w.scanUntil(i)):"{"===E?(U=w.scanUntil(o),w.scan(d),w.scanUntil(i),E="&"):U=w.scanUntil(i),!w.scan(i))throw new Error("Unclosed tag at "+w.pos);if(x=[E,U,M,w.pos],h.push(x),"#"===E||"^"===E)c.push(x);else if("/"===E){if(!(y=c.pop()))throw new Error('Unopened section "'+U+'" at '+M);if(y[1]!==U)throw new Error('Unclosed section "'+y[1]+'" at '+M)}else"name"===E||"{"===E||"&"===E?C=!0:"="===E&&A(U)}if(y=c.pop())throw new Error('Unclosed section "'+y[1]+'" at '+w.pos);return function(e){for(var t,n=[],a=n,r=[],s=0,i=e.length;s<i;++s)switch((t=e[s])[0]){case"#":case"^":a.push(t),r.push(t),a=t[4]=[];break;case"/":r.pop()[5]=t[2],a=r.length>0?r[r.length-1][4]:n;break;default:a.push(t)}return n}(function(e){for(var t,n,a=[],r=0,s=e.length;r<s;++r)(t=e[r])&&("text"===t[0]&&n&&"text"===n[0]?(n[1]+=t[1],n[3]=t[3]):(a.push(t),n=t));return a}(h))}(t,a)),i},g.prototype.render=function(e,t,n){var a=this.parse(e),r=t instanceof h?t:new h(t);return this.renderTokens(a,r,n,e)},g.prototype.renderTokens=function(e,t,n,a){for(var r,s,i,o="",l=0,c=e.length;l<c;++l)i=void 0,"#"===(s=(r=e[l])[0])?i=this.renderSection(r,t,n,a):"^"===s?i=this.renderInverted(r,t,n,a):">"===s?i=this.renderPartial(r,t,n,a):"&"===s?i=this.unescapedValue(r,t):"name"===s?i=this.escapedValue(r,t):"text"===s&&(i=this.rawValue(r)),void 0!==i&&(o+=i);return o},g.prototype.renderSection=function(e,t,r,s){var i=this,o="",l=t.lookup(e[1]);if(l){if(n(l))for(var c=0,m=l.length;c<m;++c)o+=this.renderTokens(e[4],t.push(l[c]),r,s);else if("object"==typeof l||"string"==typeof l||"number"==typeof l)o+=this.renderTokens(e[4],t.push(l),r,s);else if(a(l)){if("string"!=typeof s)throw new Error("Cannot use higher-order sections without the original template");null!=(l=l.call(t.view,s.slice(e[3],e[5]),(function(e){return i.render(e,t,r)})))&&(o+=l)}else o+=this.renderTokens(e[4],t,r,s);return o}},g.prototype.renderInverted=function(e,t,a,r){var s=t.lookup(e[1]);if(!s||n(s)&&0===s.length)return this.renderTokens(e[4],t,a,r)},g.prototype.renderPartial=function(e,t,n){if(n){var r=a(n)?n(e[1]):n[e[1]];return null!=r?this.renderTokens(this.parse(r),t,n,r):void 0}},g.prototype.unescapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return n},g.prototype.escapedValue=function(t,n){var a=n.lookup(t[1]);if(null!=a)return e.escape(a)},g.prototype.rawValue=function(e){return e[1]},e.name="mustache.js",e.version="2.3.2",e.tags=["{{","}}"];var S=new g;return e.clearCache=function(){return S.clearCache()},e.parse=function(e,t){return S.parse(e,t)},e.render=function(e,t,a){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(n(r=e)?"array":typeof r)+'" was given as the first argument for mustache#render(template, view, partials)');var r;return S.render(e,t,a)},e.to_html=function(t,n,r,s){var i=e.render(t,n,r);if(!a(s))return i;s(i)},e.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return c[e]}))},e.Scanner=v,e.Context=h,e.Writer=g,e},t&&"string"!=typeof t.nodeName?i(t):(r=[t],void 0===(s="function"==typeof(a=i)?a.apply(t,r):a)||(e.exports=s))},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(118),r=n.n(a);var s=n(0);const i={java:"java -javaagent:/path/to/elastic-apm-agent-<version>.jar \\\n-Delastic.apm.service_name=my-application \\\n-Delastic.apm.server_urls={{{apmServerUrl}}} \\\n-Delastic.apm.secret_token={{{secretToken}}} \\\n-Delastic.apm.environment=production \\\n-Delastic.apm.application_packages=org.example \\\n-jar my-application.jar",node:`// ${s.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.addThisToTheFileTopComment",{defaultMessage:"Add this to the VERY top of the first file loaded in your app"})}\nvar apm = require('elastic-apm-node').start({\n\n// ${s.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.setRequiredServiceNameComment",{defaultMessage:"Override the service name from package.json"})}\n// ${s.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.allowedCharactersComment",{defaultMessage:"Allowed characters: a-z, A-Z, 0-9, -, _, and space"})}\nserviceName: '',\n\n// ${s.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.useIfApmRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\nsecretToken: '{{{secretToken}}}',\n\n// ${s.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set the custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\nserverUrl: '{{{apmServerUrl}}}',\n\n// ${s.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.setCustomServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\nenvironment: 'production'\n})`,django:`# ${s.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.addAgentComment",{defaultMessage:"Add the agent to the installed apps"})}\nINSTALLED_APPS = (\n'elasticapm.contrib.django',\n# ...\n)\n\nELASTIC_APM = {\n# ${s.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.setRequiredServiceNameComment",{defaultMessage:"Set the required service name. Allowed characters:"})}\n# ${s.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.allowedCharactersComment",{defaultMessage:"a-z, A-Z, 0-9, -, _, and space"})}\n'SERVICE_NAME': '',\n\n# ${s.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.useIfApmServerRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\n'SECRET_TOKEN': '{{{secretToken}}}',\n\n# ${s.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set the custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\n'SERVER_URL': '{{{apmServerUrl}}}',\n\n# ${s.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.setServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\n'ENVIRONMENT': 'production',\n}\n\n# ${s.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.addTracingMiddlewareComment",{defaultMessage:"To send performance metrics, add our tracing middleware:"})}\nMIDDLEWARE = (\n'elasticapm.contrib.django.middleware.TracingMiddleware',\n#...\n)`,flask:`# ${s.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.initializeUsingEnvironmentVariablesComment",{defaultMessage:"initialize using environment variables"})}\nfrom elasticapm.contrib.flask import ElasticAPM\napp = Flask(__name__)\napm = ElasticAPM(app)\n\n# ${s.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.configureElasticApmComment",{defaultMessage:"or configure to use ELASTIC_APM in your application's settings"})}\nfrom elasticapm.contrib.flask import ElasticAPM\napp.config['ELASTIC_APM'] = {\n# ${s.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.setRequiredServiceNameComment",{defaultMessage:"Set the required service name. Allowed characters:"})}\n# ${s.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.allowedCharactersComment",{defaultMessage:"a-z, A-Z, 0-9, -, _, and space"})}\n'SERVICE_NAME': '',\n\n# ${s.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.useIfApmServerRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\n'SECRET_TOKEN': '{{{secretToken}}}',\n\n# ${s.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set the custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\n'SERVER_URL': '{{{apmServerUrl}}}',\n\n# ${s.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.setServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\n'ENVIRONMENT': 'production',\n}\n\napm = ElasticAPM(app)`,rails:"# config/elastic_apm.yml:\n\n# Set the service name - allowed characters: a-z, A-Z, 0-9, -, _ and space\n# Defaults to the name of your Rails app\nservice_name: 'my-service'\n\n# Use if APM Server requires a secret token\nsecret_token: '{{{secretToken}}}'\n\n# Set the custom APM Server URL (default: http://localhost:8200)\nserver_url: '{{{apmServerUrl}}}'\n\n# Set the service environment\nenvironment: 'production'",rack:`# config/elastic_apm.yml:\n\n# ${s.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.setServiceNameComment",{defaultMessage:"Set the service name - allowed characters: a-z, A-Z, 0-9, -, _ and space"})}\n# ${s.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.defaultsToTheNameOfRackAppClassComment",{defaultMessage:"Defaults to the name of your Rack app's class."})}\nservice_name: 'my-service'\n\n# ${s.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.useIfApmServerRequiresTokenComment",{defaultMessage:"Use if APM Server requires a token"})}\nsecret_token: '{{{secretToken}}}'\n\n# ${s.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.setCustomApmServerComment",{defaultMessage:"Set custom APM Server URL (default: {defaultServerUrl})",values:{defaultServerUrl:"http://localhost:8200"}})}\nserver_url: '{{{apmServerUrl}}}',\n\n# ${s.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.setServiceEnvironment",{defaultMessage:"Set the service environment"})}\nenvironment: 'production'`,go:`# ${s.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.initializeUsingEnvironmentVariablesComment",{defaultMessage:"Initialize using environment variables:"})}\n\n# ${s.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.setServiceNameComment",{defaultMessage:"Set the service name. Allowed characters: # a-z, A-Z, 0-9, -, _, and space."})}\n# ${s.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.usedExecutableNameComment",{defaultMessage:"If ELASTIC_APM_SERVICE_NAME is not specified, the executable name will be used."})}\nexport ELASTIC_APM_SERVICE_NAME=\n\n# ${s.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\nexport ELASTIC_APM_SERVER_URL={{{apmServerUrl}}}\n\n# ${s.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.useIfApmRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\nexport ELASTIC_APM_SECRET_TOKEN={{{secretToken}}}\n\n# ${s.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.setServiceEnvironment",{defaultMessage:"Set the service environment"})}\nexport ELASTIC_APM_ENVIRONMENT=\n`,dotnet:'{\n"ElasticApm": {\n"SecretToken": "{{{secretToken}}}",\n"ServerUrls": "{{{apmServerUrl}}}", //Set custom APM Server URL (default: http://localhost:8200)\n"ServiceName": "MyApp", //allowed characters: a-z, A-Z, 0-9, -, _, and space. Default is the entry assembly of the application\n"Environment": "production", // Set the service environment\n}\n}',php:'elastic_apm.server_url="{{{apmServerUrl}}}"\nelastic.apm.secret_token="{{{secretToken}}}"\nelastic_apm.service_name="My service"\n',js:`import { init as initApm } from '@elastic/apm-rum'\nvar apm = initApm({\n\n  // ${s.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setRequiredServiceNameComment",{defaultMessage:"Set required service name (allowed characters: a-z, A-Z, 0-9, -, _, and space)"})}\n  serviceName: 'your-app-name',\n\n  // ${s.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setCustomApmServerUrlComment",{defaultMessage:"Set custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\n  serverUrl: '{{{apmServerUrl}}}',\n\n  // ${s.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setServiceVersionComment",{defaultMessage:"Set the service version (required for source map feature)"})}\n  serviceVersion: '',\n\n  // ${s.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\n  environment: 'production'\n})`,js_script:"<script src=\"https://your-cdn-host.com/path/to/elastic-apm-rum.umd.min.js\" crossorigin><\/script>\n<script>\n  elasticApm.init({\n    serviceName: 'your-app-name',\n    serverUrl: '{{{apmServerUrl}}}',\n  })\n<\/script>\n"};function o({variantId:e,policyDetails:t}){const n=i[e];return n?r.a.render(n,t):""}}}]);